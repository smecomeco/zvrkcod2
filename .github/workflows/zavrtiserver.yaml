name: Setup Call of Duty 2 Server with GUI Access
on:
  workflow_dispatch:
jobs:
  build:
    name: Install and Run Call of Duty 2 Server
    runs-on: ubuntu-20.04
    timeout-minutes: 9999
    steps:
      - name: Update and Install Dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y curl wget tar bzip2 gzip tmux lib32gcc-s1 libstdc++6 libstdc++6:i386 lib32z1 lib32ncurses6

      - name: Create cod2server User
        run: |
          sudo adduser --disabled-password --gecos "" cod2server
          echo "cod2server ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/cod2server

      - name: Switch to cod2server User and Download LinuxGSM
        run: |
          sudo su - cod2server -c "curl -Lo linuxgsm.sh https://linuxgsm.sh && chmod +x linuxgsm.sh"
          sudo su - cod2server -c "./linuxgsm.sh cod2server"

      - name: Install Call of Duty 2 Server
        run: |
          sudo su - cod2server -c "./cod2server auto-install"

      - name: Create Necessary Directories
        run: |
          sudo su - cod2server -c "mkdir -p /home/cod2server/log/server"
          sudo su - cod2server -c "mkdir -p /home/cod2server/lgsm/config-lgsm/cod2server"

      - name: Update Server Configuration
        run: |
          sudo su - cod2server << EOF
          cat << EOT > /home/cod2server/serverfiles/main/server.cfg
          set sv_hostname "@SERVER@"
          set rcon_password "lozinka"
          set sv_maxclients 20
          set g_gametype "dm"
          set sv_mapRotation "map mp_toujane map mp_burgundy map mp_dawnville map mp_decoy map mp_matmata"
          set sv_maprotationcurrent ""
          set g_deadchat 1
          set scr_game_allowkillcam 1
          set scr_team_fftype 1
          set scr_game_spectatetype 1
          set net_port 28960
          set dedicated 2
          EOT
          EOF

      - name: Update LinuxGSM Configuration
        run: |
          sudo su - cod2server << EOF
          cat << EOT > /home/cod2server/lgsm/config-lgsm/cod2server/cod2server.cfg
          port="28960"
          clientport="28960"
          serverfiles="/home/cod2server/serverfiles"
          parms="+set dedicated 2 +set net_port 28960 +set sv_maxclients 20 +exec server.cfg"
          EOT
          EOF

      - name: Start Call of Duty 2 Server
        run: |
          sudo su - cod2server -c "mkdir -p ~/log && mkdir -p ~/log/script && mkdir -p ~/log/console && ln -s ~/serverfiles/Logs ~/log/server && ./cod2server start"

      - name: Monitor Call of Duty 2 Server
        run: |
          sudo su - cod2server -c "./cod2server monitor"

      - name: Install VNC server
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y tightvncserver xfce4 xfce4-goodies

      - name: Set VNC password
        run: |
          mkdir -p ~/.vnc
          echo "lozinka" | vncpasswd -f > ~/.vnc/passwd
          chmod 600 ~/.vnc/passwd

      - name: Start VNC server
        run: |
          vncserver :1 -geometry 1280x800 -depth 24

      - name: Install noVNC
        run: |
          sudo apt-get install -y novnc

      - name: Start noVNC
        run: |
          /usr/share/novnc/utils/launch.sh --vnc localhost:5901 --listen 8080 &


      - name: Install ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list && sudo apt update && sudo apt install ngrok

      - name: Debug NGROK_AUTH_TOKEN (safely)
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          echo "Auth token length: ${#NGROK_AUTH_TOKEN}"
          echo "First 4 characters of auth token: ${NGROK_AUTH_TOKEN:0:4}"
          echo "Last 4 characters of auth token: ${NGROK_AUTH_TOKEN: -4}"
          if [[ $NGROK_AUTH_TOKEN == *"authtoken:"* ]]; then
            echo "Warning: Auth token contains 'authtoken:' prefix"
          else
            echo "Auth token format appears correct (no 'authtoken:' prefix)"
          fi

      - name: Set up ngrok configuration
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          mkdir -p ~/.ngrok2
          echo "version: \"2\"" > ~/.ngrok2/ngrok.yml
          echo "authtoken: $NGROK_AUTH_TOKEN" >> ~/.ngrok2/ngrok.yml
          chmod 600 ~/.ngrok2/ngrok.yml
          echo "Configuration file contents (without token):"
          sed 's/authtoken: .*/authtoken: <hidden>/' ~/.ngrok2/ngrok.yml

      - name: Verify ngrok configuration
        run: ngrok config check
     
      - name: Start ngrok for CoD2 Server
        run: |
          ngrok tcp 28960 --log=stdout > ngrok_cod2.log &
          sleep 5
          echo "Connect to the CoD2 server using this address:"
          NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[1].public_url')
          echo $NGROK_URL
          cat ngrok_cod2.log

      - name: Debug Server Status
        run: |
          echo "Checking server status:"
          sudo su - cod2server -c "./cod2server details"
          echo "Checking server logs:"
          sudo su - cod2server -c "tail -n 50 /home/cod2server/log/console/cod2server-console.log || echo 'Log file not found'"
          echo "Checking network status:"
          sudo netstat -tuln | grep 28960
          echo "Checking server process:"
          ps aux | grep cod2
          echo "ngrok tunnel info:"
          NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          echo "Server is accessible at $NGROK_URL"
          curl -I $NGROK_URL || echo "Server is not accessible at $NGROK_URL"

      - name: Verify Server Accessibility
        run: |
          NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' | sed 's|tcp://||')
          IFS=':' read -ra ADDR <<< "$NGROK_URL"
          HOST=${ADDR[0]}
          PORT=${ADDR[1]}
          if nc -z -w5 $HOST $PORT; then
            echo "Server is accessible at $NGROK_URL"
          else
            echo "Server is not accessible at $NGROK_URL"
            exit 1
          fi
        
      - name: Keep alive
        run: |
          while true; do
            echo "Keeping the workflow alive. Access the URL above to connect."
            sleep 300
          done
